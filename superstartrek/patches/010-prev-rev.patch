diff -urN a/ai.c b/ai.c
--- a/ai.c	2013-11-11 04:15:59.000000000 +0400
+++ b/ai.c	2004-06-13 08:56:40.000000000 +0400
@@ -73,7 +73,7 @@
 	int success;
 	int attempts;
 	/* This should probably be just comhere + ishere */
-	int nbaddys = skill > SGOOD ?
+	int nbaddys = skill > 3 ?
 				  (int)((comhere*2 + ishere*2+klhere*1.23+irhere*1.5)/2.0):
 				  (comhere + ishere);
 	double dist1, forces;
@@ -296,7 +296,7 @@
 	/* if skill level is high, move other Klingons and Romulans too!
 	   Move these last so they can base their actions on what the
        commander(s) do. */
-	if (skill > SGOOD) for (i = 1; i <= nenhere; i++) {
+	if (skill > 3) for (i = 1; i <= nenhere; i++) {
 		ix = kx[i];
 		iy = ky[i];
 		if (quad[ix][iy] == IHK || quad[ix][iy] == IHR)
@@ -350,7 +350,7 @@
 			/* destroy the planet */
 			d.plnets[i] = nulplanet;
 			d.newstuf[d.isx][d.isy] -= 1;
-			if (REPORTS) {
+			if (damage[DRADIO] == 0.0 || condit == IHDOCKED) {
 				if (*ipage==0) pause(1);
 				*ipage = 1;
 				prout("Lt. Uhura-  \"Captain, Starfleet Intelligence reports");
@@ -510,7 +510,7 @@
 			isatb=1;
 			future[FSCDBAS] = d.date + 1.0 +2.0*Rand();
 			if (batx != 0) future[FSCDBAS] += future[FCDBAS]-d.date;
-			if (!REPORTS)
+			if (damage[DRADIO] > 0 && condit != IHDOCKED)
 				return; /* no warning */
 			iseenit = 1;
 			if (*ipage == 0)  pause(1);
@@ -536,7 +536,7 @@
 		idebug==0 &&
 #endif
 		(Rand() > 0.2 ||
-		 (!REPORTS) ||
+		 (damage[DRADIO] > 0.0 && condit != IHDOCKED) ||
 		 starch[d.isx][d.isy] > 0))
 		return;
 	if (*ipage==0) pause(1);
diff -urN a/battle.c b/battle.c
--- a/battle.c	2013-11-18 06:38:03.000000000 +0400
+++ b/battle.c	2010-12-12 07:36:54.000000000 +0300
@@ -1,96 +1,4 @@
-	#include "sst.h"
-
-#ifdef CLOAKING
-void cloak(void) {
-	int key;
-	enum {NONE, CLON, CLOFF} action = NONE;
-
-	if (ship == IHF) {
-		prout("Ye Faerie Queene has no cloaking device.");
-		return;
-	}
-
-	key = scan();
-
-	if (key == IHREAL) return;
-
-	if (key == IHALPHA) {
-		if (isit("on")) {
-			if (iscloaked) {
-				prout("The cloaking device has already been switched on.");
-				return;
-			}
-			action = CLON;
-		}
-		else if (isit("off")) {
-			if (!iscloaked) {
-				prout("The cloaking device has already been switched off.");
-				return;
-			}
-			action = CLOFF;
-		}
-		else {
-			huh();
-			return;
-		}
-	} else {
-		if (!iscloaked) {
-			proutn("Switch cloaking device on?");
-			if (ja()==0) return;
-			action = CLON;
-		}
-		if (iscloaked) {
-			proutn("Switch cloaking device off?");
-			if (ja()==0) return;
-			action = CLOFF;
-		}
-		if (action == NONE) return;
-	}
-
-    if (action==CLOFF) {
-        if (irhere && d.date >= ALGERON && !isviolreported) {
-            prout("Spock- \"Captain, the Treaty of Algeron is in effect.\n   Are you sure this is wise?\"");
-            if (ja() == 0) return;
-        }
-		prout("Engineer Scott- \"Aye, Sir.\"");
-        iscloaked = FALSE;
-        if (irhere && d.date >= ALGERON && !isviolreported) {
-            prout("The Romulan ship discovers you are breaking the Treaty of Algeron!");
-            ncviol++;
-            isviolreported = TRUE;
-        }
-            
-//        if (neutz && d.date >= ALGERON) finish(FCLOAK);
-		return;
-	}
-
-	if (damage[DCLOAK]!=0) {
-		prout("Engineer Scott- \"The cloaking device is damaged, Sir.\"");
-		return;
-	}
-
-	if (condit==IHDOCKED) {
-		prout("You cannot cloak while docked.");
-		return;
-	}
-
-	if (d.date >= ALGERON && !isviolreported)
-	{
-		prout("Spock- \"Captain, using the cloaking device is be a violation");
-		prout("  of the Treaty of Algeron. Considering the alternatives,");
-		proutn("  are you sure this is wise?");
-		if (ja()==0) return;
-	}
-
-	prout("Engineer Scott- \"The cloaking device has been engaged, Sir.\"");
-	iscloaking = TRUE;
-    if (irhere && d.date >= ALGERON && !isviolreported) {
-        prout("The Romulan ship discovers you are breaking the Treaty of Algeron!");
-        ncviol++;
-        isviolreported = TRUE;
-    }
-}
-#endif
+#include "sst.h"
 
 void sheild(int i) {
 	int key;
@@ -216,7 +124,6 @@
 			shield += aaitem;
 			energy -= aaitem;
 			return;
-		case NONE: break;
 	}
 }
 
@@ -508,9 +415,6 @@
 			j = ndevice*Rand()+1.0;
 			/* Cheat to prevent shuttle damage unless on ship */
 		} while (damage[j] < 0.0 || (j == DSHUTTL && iscraft != 1) ||
-#ifdef CLOAKING
-				 (j == DCLOAK && ship != IHE) ||
-#endif
 				 j == DDRAY);
 		cdam[l] = j;
 		extradm = (hit*damfac)/(ncrit*(75.0+25.0*Rand()));
@@ -529,13 +433,6 @@
 		prout("***Shields knocked down.");
 		shldup=0;
 	}
-#ifdef CLOAKING
-	if (damage[DCLOAK] && iscloaked)
-	{
-		prout("***Cloaking device rendered inoperative.");
-		iscloaked = FALSE;
-	}
-#endif
 }
 
 void attack(int k) {
@@ -545,10 +442,6 @@
 	double hit;
 	double pfac, dustfac, hitmax=0.0, hittot=0.0, chgfac=1.0, r;
 
-#ifdef CLOAKING
-    if (iscloaked && !iscloaking) return; // Nothing happens if we are cloaked
-#endif
-    
 	iattak = 1;
 	if (alldone) return;
 #ifdef DEBUG
@@ -561,12 +454,12 @@
 		neutz = 0;
 		return;
 	}
-	if (((comhere || ishere) && (justin == 0)) || skill == SEMERITUS) movcom();
+	if (((comhere || ishere) && (justin == 0)) || skill == 5) movcom();
 	if (nenhere==0) return;
 	pfac = 1.0/inshld;
 	if (shldchg == 1) chgfac = 0.25+0.5*Rand();
 	skip(1);
-	if (skill <= SFAIR) i = 2;
+	if (skill <= 2) i = 2;
 	for (l=1; l <= nenhere; l++) {
 		if (kpower[l] < 0) continue;	/* too weak to attack */
 		/* compute hit strength and diminsh shield power */
@@ -626,7 +519,7 @@
 		ihurt = 1;
 		cramf(hit, 0, 2);
 		proutn(" unit hit");
-		if ((damage[DSRSENS] > 0 && itflag) || skill <= SFAIR) {
+		if ((damage[DSRSENS] > 0 && itflag) || skill <= 2) {
 			proutn(" on the ");
 			crmshp();
 		}
@@ -906,12 +799,7 @@
 				break;
 			}
 		}
-#ifdef CLOAKING
-		if (iscloaked) r *= 1.2; /* Torpedoes are less accurate */
-		else
-#endif
-		if (shldup != 0 || condit == IHDOCKED) r *= 1.0 + 0.0001*shield; /* Torpedos are less accurate */
-
+		if (shldup != 0 || condit == IHDOCKED) r *= 1.0 + 0.0001*shield;
 		if (n != 1) {
 			skip(1);
 			proutn("Track for torpedo number");
@@ -974,7 +862,7 @@
 		proutn("  ");
 		crami(icas, 1);
 		prout(" casualties so far.\"");
-		casual += icas; // Changed from -=, October 2013
+		casual -= icas;
 	}
 	skip(1);
 	prout("Phaser energy dispersed by shields.");
@@ -1154,7 +1042,7 @@
 			chew();
 			key = IHEOL;
 			if (damage[DCOMPTR]!=0)
-				prout("Battle computer damaged, manual file only.");
+				prout("Battle comuter damaged, manual file only.");
 			else {
 				skip(1);
 				prouts("---WORKING---");
@@ -1244,7 +1132,7 @@
 				chew();
 				return;
 			}
-			if (key == IHALPHA && isit("no")) {
+			if (key == IHALPHA & isit("no")) {
 				no = 1;
 			}
 			energy -= rpow;
@@ -1255,8 +1143,6 @@
 			}
 			hittem(hits);
 			ididit=1;
-			break;
-			case NOTSET: break; // cannot occur
 	}
 	/* Say shield raised or malfunction, if necessary */
 	if (alldone) return;
@@ -1323,161 +1209,3 @@
 	return;
 }
 
-#ifdef CAPTURE
-/*	$NetBSD: capture.c,v 1.6 2003/08/07 09:37:50 agc Exp $	*/
-
-/*
- * Copyright (c) 1980, 1993
- *	The Regents of the University of California.  All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- * 3. Neither the name of the University nor the names of its contributors
- *    may be used to endorse or promote products derived from this software
- *    without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
-
-/*
-**  Ask a Klingon To Surrender
-**
-**	(Fat chance)
-**
-**	The Subspace Radio is needed to ask a Klingon if he will kindly
-**	surrender.  A random Klingon from the ones in the quadrant is
-**	chosen.
-**
-**	The Klingon is requested to surrender.  The probability of this
-**	is a function of that Klingon's remaining power, our power,
-**	etc.
-*/
-
-int selectklingon(void);
-
-void
-   capture(void)
-{
-	int		i;
-	int k;
-	double			x;
-
-	ididit = FALSE; // Nothing if we fail
-	Time = 0.0;
-
-	/* Make sure there is room in the brig */
-	if (brigfree == 0)
-	{
-		printf("Security reports the brig is already full.\n");
-		return;
-	}
-
-	if (!REPORTS) {
-		printf("Uhura- \"We have no subspace radio communication, sir.\"\n");
-		return;
-	}
-
-	if (damage[DTRANSP] != 0) {
-		printf("Scotty- \"Transporter damaged, sir.\"\n");
-		return;
-	}
-
-	
-	
-	/* find out if there are any at all */
-	if (klhere < 1)
-	{
-		printf("Uhura- \"Getting no response, sir.\"\n");
-		return;
-	}
-
-	/* if there is more than one Klingon, find out which one */
-	k = selectklingon();
-	Time = 0.05;   // This action will take some time
-	ididit = TRUE; //  So any others can strike back
-
-    /* check out that Klingon */
-    /* The algorithm isn't that great and could use some more
-     * intelligent design */
-//	x = 300 + 25*skill;
-	x = energy;
-	x /= kpower[k] * nenhere;
-	x *= 2.5;  /* would originally have been equivalent of 1.4, but we want command to work more often, more humanely */
-	i = x;
-#ifdef DEBUG
-	printf("Prob = %d (%.4f)\n", i, x);
-//	i = 100; // For testing, of course!
-#endif
-	if (i > 100*Rand())
-	{
-		/* guess what, he surrendered!!! */
-		printf("Klingon captain at %d,%d surrenders\n", kx[k], ky[k]);
-		i = 200*Rand();
-		if ( i > 0 )
-			printf("%d Klingons commit suicide rather than be taken captive\n", 200 - i);
-		if (i > brigfree)
-		{
-			printf("%d Klingons die because there is no room for them in the brig.\n", i-brigfree);
-			i = brigfree;
-		}
-		brigfree -= i;
-		printf("%d captives taken\n", i);
-		deadkl(kx[k], ky[k], quad[kx[k]][ky[k]], kx[k], ky[k]);
-		if (d.remkl==0) finish(FWON);
-		return;
-	}
-
-	/* big surprise, he refuses to surrender */
-	printf("Fat chance, captain\n");
-	return;
-}
-
-
-/*
- **  SELECT A KLINGON
- **
- **	Cruddy, just takes one at random.  Should ask the captain.
- **	Nah, just select the weakest one since it is most likely to
- **	surrender (Tom Almy mod)
- */
-
-int selectklingon()
-{
-	int		i;
-
-	if (nenhere < 2)
-		i = 1;
-	else
-	{	// Select the weakest one
-		double pow  = 1e6;
-		int j;
-		for (j=1; j <= nenhere; j++)
-		{
-			if (quad[kx[j]][ky[j]] == IHR) continue; // No Romulans surrender
-			if (kpower[j]< pow)
-			{
-				pow = kpower[j];
-				i = j;
-			}
-		}
-	}
-	return i;
-}
-
-#endif
\ No newline at end of file
diff -urN a/buildforwindows.txt b/buildforwindows.txt
--- a/buildforwindows.txt	2015-08-29 22:50:08.000000000 +0300
+++ b/buildforwindows.txt	1970-01-01 03:00:00.000000000 +0300
@@ -1,2 +0,0 @@
-To build under Windows, execute
-cl -DWINDOWS sst.c ai.c battle.c events.c finish.c moving.c osx.c planets.c reports.c setup.c
Binary files a/.DS_Store and b/.DS_Store differ
diff -urN a/events.c b/events.c
--- a/events.c	2013-11-11 18:55:39.000000000 +0400
+++ b/events.c	2010-12-12 21:19:30.000000000 +0300
@@ -11,8 +11,7 @@
 	if (idebug) prout("EVENTS");
 #endif
 
-	if (stdamtim == 1e30 && !REPORTS)
-	{
+	if (stdamtim == 1e30 && damage[DRADIO] != 0.0) {
 		/* chart will no longer be updated because radio is dead */
 		stdamtim = d.date;
 		for (i=1; i <= 8 ; i++)
@@ -31,15 +30,6 @@
 				datemin = future[l];
 			}
 		xtime = datemin-d.date;
-#ifdef CLOAKING
-		if (iscloaking) {
-			energy -= xtime*500.0;
-			if (energy <= 0.) {
-				finish(FNRG);
-				return;
-			}
-		}
-#endif
 		d.date = datemin;
 		/* Decrement Federation resources and recompute remaining time */
 		d.remres -= (d.remkl+4*d.remcom)*xtime;
@@ -63,12 +53,9 @@
 		/* Don't fix Deathray here */
 		for (l=1; l<=ndevice; l++)
 			if (damage[l] > 0.0 && l != DDRAY)
-                damage[l] -= (damage[l]-repair > 0.0 ? repair : damage[l]);
-        /* Fix Deathray if docked */
-        if (damage[DDRAY] > 0.0 && condit == IHDOCKED)
-            damage[DDRAY] -= (damage[l] - xtime > 0.0 ? xtime : damage[DDRAY]);
+				damage[l] -= (damage[l]-repair > 0.0 ? repair : damage[l]);
 		/* If radio repaired, update star chart and attack reports */
-		if (stdamtim != 1e30 && REPORTS) {
+		if (stdamtim != 1e30 && damage[DRADIO] == 0.0) {
 			stdamtim = 1e30;
 			prout("Lt. Uhura- \"Captain, the sub-space radio is working and");
 			prout("   surveillance reports are coming in.");
@@ -95,10 +82,7 @@
 				if (d.galaxy[quadx][quady] == 1000) return;
 				break;
 			case FSPY: /* Check with spy to see if S.C. should tractor beam */
-                if (d.nscrem == 0 ||
-#ifdef CLOAKING
-                      iscloaked ||  /* Cannot tractor beam if we can't be seen! */
-#endif
+				if (d.nscrem == 0 ||
 					ictbeam+istract > 0 ||
 					condit==IHDOCKED || isatb==1 || iscate==1) return;
 				if (ientesc ||
@@ -121,11 +105,7 @@
 					}
 					i = Rand()*d.remcom+1.0;
 					yank = square(d.cx[i]-quadx) + square(d.cy[i]-quady);
-                    if (istract || condit == IHDOCKED ||
-#ifdef CLOAKING
-                          iscloaked || /* cannot tractor beam if we can't be seen */
-#endif
-                          yank == 0) {
+					if (istract || condit == IHDOCKED || yank == 0) {
 						/* Drats! Have to reschedule */
 						future[FTBEAM] = d.date + Time +
 										 expran(1.5*intime/d.remcom);
@@ -230,8 +210,8 @@
 					future[FCDBAS] += future[FSCDBAS]-d.date;
 				future[FBATTAK] = future[FCDBAS] +expran(0.3*intime);
 				iseenit = 0;
-				if (!REPORTS)
-				     break; /* No warning :-( */
+				if (damage[DRADIO] != 0.0 &&
+					condit != IHDOCKED) break; /* No warning :-( */
 				iseenit = 1;
 				if (ipage==0) pause(1);
 				ipage = 1;
@@ -286,7 +266,8 @@
 					skip(1);
 					prout("Spock-  \"Captain, I believe the starbase has been destroyed.\"");
 				}
-				else if (d.rembase != 1 && REPORTS) {
+				else if (d.rembase != 1 &&
+						 (damage[DRADIO] <= 0.0 || condit == IHDOCKED)) {
 					/* Get word via subspace radio */
 					if (ipage==0) pause(1);
 					ipage = 1;
@@ -334,7 +315,7 @@
 					if (i < 1 || i > 8 || j < 1 || j > 8 ||
 						d.galaxy[probecx][probecy] == 1000) {
 						// Left galaxy or ran into supernova
-						if (REPORTS) {
+						if (damage[DRADIO]==0.0 || condit == IHDOCKED) {
 							if (ipage==0) pause(1);
 							ipage = 1;
 							skip(1);
@@ -348,7 +329,7 @@
 						future[FDSPROB] = 1e30;
 						break;
 					}
-					if (REPORTS) {
+					if (damage[DRADIO]==0.0   || condit == IHDOCKED) {
 						if (ipage==0) pause(1);
 						ipage = 1;
 						skip(1);
@@ -359,9 +340,9 @@
 				}
 				/* Update star chart if Radio is working or have access to
 				   radio. */
-				if (REPORTS) 
+				if (damage[DRADIO] == 0.0 || condit == IHDOCKED)
 					starch[probecx][probecy] = damage[DRADIO] > 0.0 ?
-						                    d.galaxy[probecx][probecy]+1000 : 1;
+										   d.galaxy[probecx][probecy]+1000 : 1;
 				proben--; // One less to travel
 				if (proben == 0 && isarmed &&
 					d.galaxy[probecx][probecy] % 10 > 0) {
@@ -376,7 +357,7 @@
 }
 
 				
-void waiting(void) {
+void wait(void) {
 	int key;
 	double temp, delay, origTime;
 
@@ -422,6 +403,9 @@
 		ididit = 1;
 		if (alldone) return;
 		delay -= temp;
+		/* Repair Deathray if long rest at starbase */
+		if (origTime-delay >= 9.99 && condit == IHDOCKED)
+			damage[DDRAY] = 0.0;
 	} while (d.galaxy[quadx][quady] != 1000); // leave if quadrant supernovas
 
 	resting = 0;
@@ -599,7 +583,7 @@
 	skip(1);
 	prout("Force of nova displaces starship.");
 	iattak=2;	/* Eliminates recursion problem */
-	lmove();
+	move();
 	Time = 10.0*dist/16.0;
 	return;
 }
@@ -651,7 +635,7 @@
 
 		if (nqx != quady || nqy != quady || justin != 0) {
 			/* it isn't here, or we just entered (treat as inroute) */
-			if (REPORTS) {
+			if (damage[DRADIO] == 0.0 || condit == IHDOCKED) {
 				skip(1);
 				proutn("Message from Starfleet Command       Stardate ");
 				cramf(d.date, 0, 1);
@@ -699,18 +683,16 @@
 	}
 	/* destroy any Klingons in supernovaed quadrant */
 	num=d.galaxy[nqx][nqy];
-    kldead = num/100;
-    d.remkl -= kldead; // Moved here to correctly set remaining Klingon count
+	kldead = num/100;
 	comdead = iscdead = 0;
 	if (nqx==d.isx && nqy == d.isy) {
 		/* did in the Supercommander! */
 		d.nscrem = d.isx = d.isy = isatb = iscate = 0;
 		iscdead = 1;
-		kldead--; /* Get proper kill credit */
 		future[FSCMOVE] = future[FSCDBAS] = 1e30;
 	}
-
-    if (d.remcom) {
+	d.remkl -= kldead;
+	if (d.remcom) {
 		int maxloop = d.remcom, l;
 		for (l = 1; l <= maxloop; l++) {
 			if (d.cx[l] == nqx && d.cy[l] == nqy) {
@@ -762,7 +744,9 @@
 		d.nsckill += iscdead;
 	}
 	/* mark supernova in galaxy and in star chart */
-	if ((quadx == nqx && quady == nqy) || REPORTS)
+	if ((quadx == nqx && quady == nqy) ||
+		damage[DRADIO] == 0 ||
+		condit == IHDOCKED)
 		starch[nqx][nqy] = 1;
 	d.galaxy[nqx][nqy] = 1000;
 	/* If supernova destroys last klingons give special message */
diff -urN a/finish.c b/finish.c
--- a/finish.c	2013-11-11 18:59:09.000000000 +0400
+++ b/finish.c	1997-02-14 01:14:26.000000000 +0300
@@ -74,22 +74,12 @@
 			if (d.nromrem != 0)
 				printf("The remaining %d Romulans surrender to Starfleet Command.\n",
 					   d.nromrem);
-
-
-            prout("You have smashed the Klingon invasion fleet and saved");
-            prout("the Federation.");
-
-#ifdef CAPTURE
-            if (alive && brigcapacity-brigfree > 0) { // captured Klingon crew will get transfered to starbase
-                kcaptured += brigcapacity-brigfree;
-                printf("The %d captured Klingons are transferred to Star Fleet Command.\n",
-                       brigcapacity-brigfree);
-            }
-#endif
+			
+			prout("You have smashed the Klingon invasion fleet and saved");
+			prout("the Federation.");
 			gamewon=1;
 			if (alive) {
-                double badpt;
-
+				double badpt;
 				badpt = 5.*d.starkl + casual + 10.*d.nplankl +
 						45.*nhelp+100.*d.basekl;
 				if (ship == IHF) badpt += 100.0;
@@ -102,22 +92,22 @@
 					skip(1);
 					prout("In fact, you have done so well that Starfleet Command");
 					switch (skill) {
-						case SNOVICE:
+						case 1:
 							prout("promotes you one step in rank from \"Novice\" to \"Fair\".");
 							break;
-						case SFAIR:
+						case 2:
 							prout("promotes you one step in rank from \"Fair\" to \"Good\".");
 							break;
-						case SGOOD:
+						case 3:
 							prout("promotes you one step in rank from \"Good\" to \"Expert\".");
 							break;
-						case SEXPERT:
+						case 4:
 							prout("promotes you to Commodore Emeritus.");
 							skip(1);
 							prout("Now that you think you're really good, try playing");
 							prout("the \"Emeritus\" game. It will splatter your ego.");
 							break;
-						case SEMERITUS:
+						case 5:
 							skip(1);
 							prout("Computer-  ERROR-ERROR-ERROR-ERROR");
 							skip(1);
@@ -131,7 +121,7 @@
 							skip(1);
 							break;
 					}
-					if (skill > SGOOD) {
+					if (skill > 3) {
 						if (thawed
 #ifdef DEBUG
 							&& !idebug
@@ -152,7 +142,7 @@
 				skip(1);
 				prout("LIVE LONG AND PROSPER.");
 			}
-			score(0);
+			score();
 			if (igotit != 0) plaque();
 			return;
 		case FDEPLETE: // Federation Resources Depleted
@@ -170,7 +160,7 @@
 				prout("sentenced to death by slow torture.");
 				alive = 0;
 			}
-			score(0);
+			score();
 			return;
 		case FLIFESUP:
 			prout("Your life support reserves have run out, and");
@@ -194,7 +184,7 @@
 			prout("barrier which surrounds the galaxy.");
 			skip(1);
 			prout("Your navigation is abominable.");
-			score(0);
+			score();
 			return;
 		case FNOVA:
 			prout("Your starship has been destroyed by a nova.");
@@ -227,7 +217,7 @@
 			break;
 		case FLOST:
 			prout("You and your landing party have been");
-			prout("converted to energy, dissipating through space.");
+			prout("converted to energy, disipating through space.");
 			break;
 		case FMINING:
 			prout("You are left with your landing party on");
@@ -281,22 +271,7 @@
 			prout("Your ship is drawn to the center of the black hole.");
 			prout("You are crushed into extremely dense matter.");
 			break;
-#ifdef CLOAKING
-		case FCLOAK:
-			ncviol++;
-			prout("You have violated the Treaty of Algeron.");
-			prout("The Romulan Empire can never trust you again.");
-			break;
-#endif
 	}
-#ifdef CLOAKING
-	if (ifin!=FWON && ifin!=FCLOAK && iscloaked!=0) {
-		prout("Your ship was cloaked so your subspace radio did not receive anything.");
-		prout("You may have missed some warning messages.");
-		skip(1);
-	}
-#endif
-
 	if (ship==IHF) ship= 0;
 	else if (ship == IHE) ship = IHF;
 	alive = 0;
@@ -324,15 +299,14 @@
 		prout("to think about pigeons.");
 		gamewon = 1;
 	}
-	score(0);
+	score();
 }
 
-void score(int inGame) {
+void score(void) {
 	double timused = d.date - indate;
-    int ithperd, iwon, klship;
-    int dnromrem = d.nromrem; // Leave global value alone
+	int ithperd, iwon, klship;
 
-    if (!inGame) pause(0);
+	pause(0);
 
 	iskill = skill;
 	if ((timused == 0 || d.remkl != 0) && timused < 5.0) timused = 5.0;
@@ -343,83 +317,65 @@
 	if (ship == IHE) klship = 0;
 	else if (ship == IHF) klship = 1;
 	else klship = 2;
-	if (gamewon == 0 || inGame) dnromrem = 0; // None captured if no win or if still in the game
+	if (gamewon == 0) d.nromrem = 0; // None captured if no win
 	iscore = 10*d.killk + 50*d.killc + ithperd + iwon
 			 - 100*d.basekl - 100*klship - 45*nhelp -5*d.starkl - casual
-		 + 20*d.nromkl + 200*d.nsckill - 10*d.nplankl + dnromrem;
-#ifdef CLOAKING
-	iscore -= 100*ncviol;
-#endif
-#ifdef CAPTURE
-	iscore += 3*kcaptured;
-#endif
+			 + 20*d.nromkl + 200*d.nsckill - 10*d.nplankl + d.nromrem;
 	if (alive == 0) iscore -= 200;
 	skip(2);
-    if (inGame) prout("Your score so far --");
-    else prout("Your score --");
+	prout("Your score --");
 	if (d.nromkl)
-		printf(d.nromkl> 1 ? "%6d Romulan ships destroyed            %5d\n" : "%6d Romulan ship destroyed             %5d\n",
-			   d.nromkl, 20*d.nromkl);
-	if (dnromrem)
-		printf(dnromrem > 1 ? "%6d Romulan ships captured             %5d\n" : "%6d Romulan ship captured              %5d\n",
-			   dnromrem, dnromrem);
+		printf("%6d Romulans destroyed                 %5d\n",
+			   d.nromkl,20*d.nromkl);
+	if (d.nromrem)
+		printf("%6d Romulans captured                  %5d\n",
+			   d.nromrem, d.nromrem);
 	if (d.killk)
-		printf(d.killk > 1 ? "%6d ordinary Klingon ships destroyed   %5d\n" : "%6d ordinary Klingon ship destroyed    %5d\n",
-			   d.killk,  10*d.killk);
+		printf("%6d ordinary Klingons destroyed        %5d\n",
+			   d.killk, 10*d.killk);
 	if (d.killc)
-		printf(d.killc > 1 ? "%6d Klingon Commander ships destroyed  %5d\n" : "%6d Klingon Commander ship destroyed   %5d\n",
+		printf("%6d Klingon commanders destroyed       %5d\n",
 			   d.killc, 50*d.killc);
 	if (d.nsckill)
-		printf("%6d Super-Commander ship destroyed     %5d\n",
+		printf("%6d Super-Commander destroyed          %5d\n",
 			   d.nsckill, 200*d.nsckill);
 	if (ithperd)
 		printf("%6.2f Klingons per stardate              %5d\n",
 			   perdate, ithperd);
-#ifdef CAPTURE
-	if (kcaptured)
-		printf(kcaptured > 1 ? "%6d Klingons captured                  %5d\n" : "%6d Klingon captured                   %5d\n",
-		        kcaptured, 3*kcaptured);
-#endif
 	if (d.starkl)
-		printf(d.starkl > 1 ? "%6d stars destroyed by your action     %5d\n" : "%6d star destroyed by your action      %5d\n",
+		printf("%6d stars destroyed by your action     %5d\n",
 			   d.starkl, -5*d.starkl);
 	if (d.nplankl)
-		printf(d.nplankl > 1 ? "%6d planets destroyed by your action   %5d\n" : "%6d planet destroyed by your action    %5d\n",
+		printf("%6d planets destroyed by your action   %5d\n",
 			   d.nplankl, -10*d.nplankl);
 	if (d.basekl)
-		printf(d.basekl > 1 ? "%6d bases destroyed by your action     %5d\n" : "%6d base destroyed by your action      %5d\n",
+		printf("%6d bases destroyed by your action     %5d\n",
 			   d.basekl, -100*d.basekl);
 	if (nhelp)
-		printf(nhelp > 1 ? "%6d calls for help from starbase       %5d\n" : "%6d call for help from starbase        %5d\n",
+		printf("%6d calls for help from starbase       %5d\n",
 			   nhelp, -45*nhelp);
 	if (casual)
-		printf(casual > 1 ? "%6d casualties incurred                %5d\n" : "%6d casualty incurred                  %5d\n",
+		printf("%6d casualties incurred                %5d\n",
 			   casual, -casual);
 	if (klship)
-		printf(klship > 1 ? "%6d ships lost or destroyed            %5d\n" : "%6d ship lost or destroyed             %5d\n",
+		printf("%6d ship(s) lost or destroyed          %5d\n",
 			   klship, -100*klship);
-#ifdef CLOAKING
-	if (ncviol>0)
-		printf(ncviol > 1 ? "%6d Treaty of Algeron violations       %5d\n" : "%6d Treaty of Algeron violation        %5d\n",
-		       ncviol, -100*ncviol);
-#endif
 	if (alive==0)
 		prout("Penalty for getting yourself killed        -200");
 	if (gamewon) {
 		skip(1);
 		proutn("Bonus for winning ");
 		switch (skill) {
-			case SNOVICE: proutn("Novice game  "); break;
-			case SFAIR: proutn("Fair game    "); break;
-			case SGOOD: proutn("Good game    "); break;
-			case SEXPERT: proutn("Expert game  "); break;
-			case SEMERITUS: proutn("Emeritus game"); break;
+			case 1: proutn("Novice game  "); break;
+			case 2: proutn("Fair game    "); break;
+			case 3: proutn("Good game    "); break;
+			case 4: proutn("Expert game  "); break;
+			case 5: proutn("Emeritus game"); break;
 		}
 		printf("           %5d\n", iwon);
 	}
 	skip(2);
-    printf("TOTAL SCORE                               %5d\n", iscore);
-    if (inGame && skill < SGOOD) printf("REMEMBER--The score doesn't really matter until the mission is accomplished!\n");
+	printf("TOTAL SCORE                               %5d\n", iscore);
 }
 
 void plaque(void) {
@@ -477,8 +433,8 @@
 	fprintf(fp, "                                                       \"Commodore Emeritus\"\n\n");
 	fprintf(fp, "                                                          ");
 	switch (iskill) {
-		case SEXPERT: fprintf(fp," Expert level\n\n"); break;
-		case SEMERITUS: fprintf(fp,"Emeritus level\n\n"); break;
+		case 4: fprintf(fp," Expert level\n\n"); break;
+		case 5: fprintf(fp,"Emeritus level\n\n"); break;
 		default: fprintf(fp," Cheat level\n\n"); break;
 	}
 	t = time(NULL);
diff -urN a/linux.c b/linux.c
--- a/linux.c	1970-01-01 03:00:00.000000000 +0300
+++ b/linux.c	2002-06-21 08:02:54.000000000 +0400
@@ -0,0 +1,31 @@
+#include <stdlib.h>
+#include <time.h>
+#include <sys/ioctl.h>
+
+void randomize(void) {
+	srand((int)time(NULL));
+}
+
+
+int max(int a, int b) {
+	if (a > b) return a;
+	return b;
+}
+
+int min(int a, int b) {
+	if (a < b) return a;
+	return b;
+}
+
+int getch(void) {
+	char chbuf[1];
+	struct termio oldstate, newstate;
+    ioctl(0,TCGETA,&oldstate);
+	newstate = oldstate;
+	newstate.c_iflag = 0;
+	newstate.c_lflag = 0;
+	ioctl(0,TCSETA,&newstate);
+	read(0, &chbuf, 1);
+    ioctl(0,TCSETA,&oldstate);
+}
+
diff -urN a/makefile b/makefile
--- a/makefile	2014-01-04 02:57:22.000000000 +0400
+++ b/makefile	2002-06-21 08:02:12.000000000 +0400
@@ -1,18 +1,15 @@
-CFLAGS=     -O -DSCORE -DCAPTURE -DCLOAKING -Wno-unused-result
-# CFLAGS=     -O -Wno-unused-result
+CFLAGS=     -O
 
 .c.o:
 	$(CC) $(CFLAGS) -c $<
 
-OFILES=     sst.o finish.o reports.o setup.o osx.o moving.o battle.o events.o ai.o planets.o
+OFILES=     sst.o finish.o reports.o setup.o linux.o moving.o battle.o events.o ai.o planets.o
 
 HFILES=     sst.h
 
-sst:  $(OFILES)
+sstos2.exe:  $(OFILES)
 	gcc  -o sst $(OFILES) -lm
 
-clean:
-	rm $(OFILES)
         
 $(OFILES):  $(HFILES)
 
diff -urN a/MAKEFILE.DOS b/MAKEFILE.DOS
--- a/MAKEFILE.DOS	1970-01-01 03:00:00.000000000 +0300
+++ b/MAKEFILE.DOS	1997-02-06 21:38:06.000000000 +0300
@@ -0,0 +1,14 @@
+MODEL=m
+CFLAGS=-f87 -2 -m$(MODEL)
+
+.c.obj:; bcc $(CFLAGS) -c $*.c
+
+OBJS= sst.obj setup.obj reports.obj finish.obj moving.obj\
+ battle.obj events.obj ai.obj planets.obj
+
+sst.exe:	$(OBJS) sst.lnk
+	bcc @sst.lnk
+
+
+sst.lnk:	makefile
+	>sst.lnk $(CFLAGS) -M $(OBJS) noeh$(MODEL).lib
\ No newline at end of file
diff -urN a/MAKEFILE.OS2 b/MAKEFILE.OS2
--- a/MAKEFILE.OS2	1970-01-01 03:00:00.000000000 +0300
+++ b/MAKEFILE.OS2	1997-02-06 21:24:18.000000000 +0300
@@ -0,0 +1,17 @@
+CFLAGS=     -O
+
+.SUFFIXES: .o .c .s .exe
+
+.c.o:
+	$(CC) $(CFLAGS) -c $<
+
+OFILES=     sst.o finish.o reports.o setup.o os2.o moving.o battle.o events.o ai.o planets.o
+
+HFILES=     sst.h
+
+sstos2.exe:  $(OFILES)
+	gcc  -o sstos2.exe $(OFILES)
+
+        
+$(OFILES):  $(HFILES)
+
diff -urN a/moving.c b/moving.c
--- a/moving.c	2014-01-04 02:39:32.000000000 +0400
+++ b/moving.c	2010-12-12 21:18:40.000000000 +0300
@@ -2,10 +2,9 @@
 
 static void getcd(int, int);
 
-void lmove(void) {
+void move(void) {
 	double angle, deltax, deltay, bigger, x, y,
-    finald, finalx, finaly, stopegy;
-    int oldquadx, oldquady;
+	finald, finalx, finaly, stopegy;
 	int trbeam = 0, n, l, ix, iy, kink, kinks, iquad;
 
 	if (inorbit) {
@@ -24,14 +23,6 @@
 	deltay /= bigger;
 	deltax /= bigger;
 
-#ifdef CLOAKING
-    if (iscloaked && d.date+Time >= future[FTBEAM])
-    {  /* We can't be tracto beamed if cloaked, so move the event into the future */
-        future[FTBEAM] = d.date + Time +
-                         expran(1.5*intime/d.remcom);
-    }
-#endif
-    
 	/* If tractor beam is to occur, don't move full distance */
 	if (d.date+Time >= future[FTBEAM]) {
 		trbeam = 1;
@@ -52,11 +43,7 @@
 			if (ix < 1 || ix > 10 || iy < 1 || iy > 10) {
 				/* Leaving quadrant -- allow final enemy attack */
 				/* Don't do it if being pushed by Nova */
-				if (nenhere != 0 && iattak != 2
-#ifdef CLOAKING
-				    && !iscloaked
-#endif
-				   ) {
+				if (nenhere != 0 && iattak != 2) {
 					newcnd();
 					for (l = 1; l <= nenhere; l++) {
 						finald = sqrt((ix-kx[l])*(double)(ix-kx[l]) +
@@ -72,7 +59,7 @@
 				ix = x+10.0*dist*bigger*deltax+0.5;
 				iy = y+10.0*dist*bigger*deltay+0.5;
 				/* check for edge of galaxy */
-				kinks = FALSE;
+				kinks = 0;
 				do {
 					kink = 0;
 					if (ix <= 0) {
@@ -91,7 +78,7 @@
 						iy = 161 - iy;
 						kink = 1;
 					}
-					if (kink) kinks = TRUE;
+					if (kink) kinks = 1;
 				} while (kink);
 
 				if (kinks) {
@@ -103,27 +90,21 @@
 					}
 					prout("\nYOU HAVE ATTEMPTED TO CROSS THE NEGATIVE ENERGY BARRIER\n"
 						 "AT THE EDGE OF THE GALAXY.  THE THIRD TIME YOU TRY THIS,\n"
-                          "YOU WILL BE DESTROYED.\n");
-                }
+						 "YOU WILL BE DESTROYED.\n");
+				}
 				/* Compute final position in new quadrant */
-                if (trbeam) return; /* Don't bother if we are to be beamed */
-                oldquadx = quadx;
-                oldquady = quady;
+				if (trbeam) return; /* Don't bother if we are to be beamed */
 				quadx = (ix+9)/10;
-                quady = (iy+9)/10;
-                sectx = ix - 10*(quadx-1);
-                secty = iy - 10*(quady-1);
-                if (quadx != oldquadx || quady != oldquady) {
-                    proutn("\nEntering");
-                    cramlc(1, quadx, quady);
-                } else {
-                    prout("(Negative energy barrier disturbs quadrant.)");
-                }
-                skip(1);
-                quad[sectx][secty] = ship;
-                newqad(0);
-                return;
-            }
+				quady = (iy+9)/10;
+				sectx = ix - 10*(quadx-1);
+				secty = iy - 10*(quady-1);
+				proutn("\nEntering");
+				cramlc(1, quadx, quady);
+				skip(1);
+				quad[sectx][secty] = ship;
+				newqad(0);
+				return;
+			}
 			iquad = quad[ix][iy];
 			if (iquad != IHDOT) {
 				/* object encountered in flight path */
@@ -176,16 +157,16 @@
 							return;
 						}
 						break;
-                }
-				goto label100;	/* sorry! */ /* ACTUALLY BREAK SHOULD WORK HERE */
-            }
-        }
+				}
+				goto label100;	/* sorry! */
+			}
+		}
 		dist = 0.1*sqrt((sectx-ix)*(double)(sectx-ix) +
 						(secty-iy)*(double)(secty-iy));
 		sectx = ix;
 		secty = iy;
 	}
-	finalx = sectx; /* THESE STATEMENTS DO NOTHING USEFUL */
+	finalx = sectx;
 	finaly = secty;
 label100:
 	/* No quadrant change -- compute new avg enemy distances */
@@ -222,26 +203,12 @@
 		prout(" not adjacent to base.");
 		return;
 	}
-#ifdef CLOAKING
-	if (iscloaked) {
-		prout("You cannot dock while cloaked.");
-		return;
-	}
-#endif
 	condit = IHDOCKED;
 	prout("Docked.");
 	if (energy < inenrg) energy = inenrg;
 	shield = inshld;
 	torps = intorps;
-    lsupres = inlsr;
-#ifdef CAPTURE
-    if (brigcapacity-brigfree > 0)
-    {
-        printf("%d captured Klingons transferred to base.\n", brigcapacity-brigfree);
-        kcaptured += brigcapacity-brigfree;
-        brigfree = brigcapacity;
-    }
-#endif
+	lsupres = inlsr;
 	if (stdamtim != 1e30 &&
 		(future[FCDBAS] < 1e30 || isatb == 1) && iseenit == 0) {
 		/* get attack report from base */
@@ -273,7 +240,7 @@
 	
 	if (landed == 1 && !isprobe) {
 		prout("Dummy! You can't leave standard orbit until you");
-		proutn("are back aboard the ");
+		proutn("are back abourt the ");
 		crmshp();
 		prout(".");
 		chew();
@@ -413,21 +380,12 @@
 			return;
 		}
 		deltax = aaitem;
-        key = scan();
-        if (key == IHEOL) {
-            deltay = 0.0;
-        } else 	if (key != IHREAL) {
+		key = scan();
+		if (key != IHREAL) {
 			huh();
 			return;
-		} else {
-            deltay = aaitem;
-        }
-        
-        if (coordfixed) {
-            double temp = deltax;
-            deltax = deltay;
-            deltay = -temp;
-        }
+		}
+		deltay = aaitem;
 	}
 	/* Check for zero movement */
 	if (deltax == 0 && deltay == 0) {
@@ -489,16 +447,15 @@
 		prout("First Officer Spock- \"Captain, our speed under impulse");
 		prout("power is only 0.95 sectors per stardate. Are you sure");
 		prout("we dare spend the time?\"");
-		if (ja() == 0) { Time = 0.0; return;}
+		if (ja() == 0) return;
 	}
 	/* Activate impulse engines and pay the cost */
-	lmove();
+	move();
 	ididit = 1;
 	if (alldone) return;
 	power = 20.0 + 100.0*dist;
 	energy -= power;
-//	Time = dist/0.095; Don't recalculate because lmove may have
-//	adjusted it for tractor beaming
+	Time = dist/0.095;
 	if (energy <= 0) finish(FNRG);
 	return;
 }
@@ -510,18 +467,10 @@
 
 	if (i!=2) { /* Not WARPX entry */
 		ididit = 0;
-#ifdef CLOAKING
-		if (iscloaked) {
-			chew();
-			skip(1);
-			prout("Engineer Scott- \"The warp engines can better not be used while cloaked, Sir.\"");
-			return;
-		}
-#endif
 		if (damage[DWARPEN] > 10.0) {
 			chew();
 			skip(1);
-			prout("Engineer Scott- \"The warp engines are damaged, Sir.\""); // Was "Impulse" 10/2013
+			prout("Engineer Scott- \"The impulse engines are damaged, Sir.\"");
 			return;
 		}
 		if (damage[DWARPEN] > 0.0 && warpfac > 4.0) {
@@ -573,7 +522,7 @@
 			cramf(100.0*Time/d.remtime, 0, 2);
 			prout(" percent of our");
 			prout("  remaining time.  Are you sure this is wise?\"");
-			if (ja() == 0) { Time = 0.0; return;}
+			if (ja() == 0) { ididit = 0; return;}
 		}
 	}
 	/* Entry WARPX */
@@ -628,7 +577,7 @@
 				
 
 	/* Activate Warp Engines and pay the cost */
-	lmove();
+	move();
 	if (alldone) return;
 	energy -= dist*warpfac*warpfac*warpfac*(shldup+1);
 	if (energy <= 0) finish(FNRG);
@@ -876,12 +825,12 @@
 	if (future[FDSPROB] != 1e30) {
 		chew();
 		skip(1);
-		if (REPORTS) {
-			prout("Uhura- \"The previous probe is still reporting data, Sir.\"");
-		} else {
+		if (damage[DRADIO] != 0 && condit != IHDOCKED) {
 			prout("Spock-  \"Records show the previous probe has not yet");
-			prout("   reached its destination.\"");
+			prout("   reached it's destination.\"");
 		}
+		else
+			prout("Uhura- \"The previous probe is still reporting data, Sir.\"");
 		return;
 	}
 	key = scan();
diff -urN a/os2.c b/os2.c
--- a/os2.c	1970-01-01 03:00:00.000000000 +0300
+++ b/os2.c	1997-02-06 00:54:20.000000000 +0300
@@ -0,0 +1,31 @@
+#include <stdlib.h>
+#include <time.h>
+#include <sys/ioctl.h>
+#include <sys/termio.h>
+
+void randomize(void) {
+	srand((int)time(NULL));
+}
+
+
+int max(int a, int b) {
+	if (a > b) return a;
+	return b;
+}
+
+int min(int a, int b) {
+	if (a < b) return a;
+	return b;
+}
+
+int getch(void) {
+	char chbuf[1];
+	struct termio oldstate, newstate;
+    ioctl(0,TCGETA,&oldstate);
+	newstate = oldstate;
+	newstate.c_iflag = 0;
+	newstate.c_lflag = 0;
+	ioctl(0,TCSETA,&newstate);
+	read(0, &chbuf, 1);
+    ioctl(0,TCSETA,&oldstate);
+}
\ No newline at end of file
diff -urN a/osx.c b/osx.c
--- a/osx.c	2015-08-28 23:16:16.000000000 +0300
+++ b/osx.c	1970-01-01 03:00:00.000000000 +0300
@@ -1,40 +0,0 @@
-#include <stdlib.h>
-#include <stdio.h>
-#include <time.h>
-#ifndef WINDOWS
-#include <sys/ioctl.h>
-#include <termios.h>
-#include <unistd.h>
-#endif
-
-void randomize(void) {
-	srand((int)time(NULL));
-}
-
-#ifndef WINDOWS
-int max(int a, int b) {
-	if (a > b) return a;
-	return b;
-}
-
-int min(int a, int b) {
-	if (a < b) return a;
-	return b;
-}
-
-int // <editor-fold defaultstate="collapsed" desc="comment">
-getch// </editor-fold>
-(void) {
-	char chbuf[1];
-    struct termios oldstate, newstate;
-    fflush(stdout);
-	tcgetattr(0, &oldstate);
-	newstate = oldstate;
-	newstate.c_lflag &= ~ICANON;
-	newstate.c_lflag &= ~ECHO;
-	tcsetattr(0, TCSANOW,  &newstate);
-	read(0, &chbuf, 1);
-	tcsetattr(0, TCSANOW, &oldstate);
-        return chbuf[0];
-}
-#endif
\ No newline at end of file
diff -urN a/planets.c b/planets.c
--- a/planets.c	2013-09-20 19:56:31.000000000 +0400
+++ b/planets.c	1997-02-10 02:52:30.000000000 +0300
@@ -70,7 +70,7 @@
 	}
 	if (plnetx == 0 || abs(sectx-plnetx) > 1 || abs(secty-plnety) > 1) {
 		crmshp();
-		prout(" not adjacent to planet.\n");
+		prout(" not adjacient to planet.\n");
 		return;
 	}
 	Time = 0.02+0.03*Rand();
@@ -323,7 +323,7 @@
 	Time = 3.0e-5*height;
 	if (Time >= 0.8*d.remtime) {
 		prout("First Officer Spock-  \"Captain, I compute that such");
-		prout("  a maneuver would require approximately ");
+		prout("  a maneuver would require aproximately ");
 		cramf(100*Time/d.remtime,0,4);
 		prout("% of our");
 		prout("remaining time.");
@@ -416,7 +416,7 @@
 		return;
 	}
 	prout("Spock-  \"Captain, the 'Experimental Death Ray'");
-	prout("  is highly unpredictable.  Considering the alternatives,");
+	prout("  is highly unpredictible.  Considering the alternatives,");
 	prout("  are you sure this is wise?\" ");
 	if (ja()==0) return;
 	prout("Spock-  \"Acknowledged.\"");
@@ -436,9 +436,8 @@
 	if (r > .30) {
 		prouts("Sulu- \"Captain!  It's working!\"");
 		skip(2);
-		while (nenhere > 0) {
+		while (nenhere > 0)
 			deadkl(kx[1],ky[1],quad[kx[1]][ky[1]],kx[1],ky[1]);
-		}
 		prout("Ensign Chekov-  \"Congratulations, Captain!\"");
 		if (d.remkl == 0) finish(FWON);
 		prout("Spock-  \"Captain, I believe the `Experimental Death Ray'");
@@ -446,7 +445,7 @@
 			prout("   is still operational.\"");
 		}
 		else {
-			prout("   has been rendered dysfunctional.\"");
+			prout("   has been rendered disfunctional.\"");
 			damage[DDRAY] = 39.95;
 		}
 		return;
@@ -472,7 +471,7 @@
 		skip(1);
 		prout("Lt. Uhura-  \"Graaeek!  Graaeek!\"");
 		skip(1);
-		prout("Spock-  \"Fascinating!  . . . All humans aboard");
+		prout("Spock-  \"Facinating!  . . . All humans aboard");
 		prout("  have apparently been transformed into strange mutations.");
 		prout("  Vulcans do not seem to be affected.");
 		skip(1);
diff -urN a/reports.c b/reports.c
--- a/reports.c	2014-01-04 02:39:44.000000000 +0400
+++ b/reports.c	1997-02-14 01:48:16.000000000 +0300
@@ -35,24 +35,24 @@
 		default: s2="unknown length"; break;
 	}
 	switch (skill) {
-		case SNOVICE: s3="novice"; break;
-		case SFAIR: s3="fair"; break;
-		case SGOOD: s3="good"; break;
-		case SEXPERT: s3="expert"; break;
-		case SEMERITUS: s3="emeritus"; break;
+		case 1: s3="novice"; break;
+		case 2: s3="fair"; break;
+		case 3: s3="good"; break;
+		case 4: s3="expert"; break;
+		case 5: s3="emeritus"; break;
 		default: s3="skilled"; break;
 	}
 	printf("\nYou %s playing a %s%s %s game.\n",
 		   alldone? "were": "are now", s1, s2, s3);
-	if (skill>SGOOD && thawed && !alldone) prout("No plaque is allowed.");
+	if (skill>3 && thawed && !alldone) prout("No plaque is allowed.");
 	if (tourn) printf("This is tournament game %d.\n", tourn);
 	if (f) printf("Your secret password is \"%s\"\n",passwd);
-	printf("%d of %d Klingon ships have been destroyed",
+	printf("%d of %d Klingons have been killed",
 		   d.killk+d.killc+d.nsckill, inkling);
 	if (d.killc) printf(", including %d Commander%s.\n", d.killc, d.killc==1?"":"s");
 	else if (d.killk+d.nsckill > 0) prout(", but no Commanders.");
 	else prout(".");
-	if (skill > SFAIR) printf("The Super Commander has %sbeen destroyed.\n",
+	if (skill > 2) printf("The Super Commander has %sbeen destroyed.\n",
 						  d.nscrem?"not ":"");
 	if (d.rembase != inbase) {
 		proutn("There ");
@@ -67,7 +67,7 @@
 		prout(" remaining.");
 	}
 	else printf("There are %d bases.\n", inbase);
-	if (REPORTS || iseenit) {
+	if (damage[DRADIO] == 0.0 || condit == IHDOCKED || iseenit) {
 		/* Don't report this if not seen and
 			either the radio is dead or not at base! */
 		attakreport();
@@ -75,12 +75,6 @@
 	}
 	if (casual) printf("%d casualt%s suffered so far.\n",
 					   casual, casual==1? "y" : "ies");
-#ifdef CAPTURE
-    if (brigcapacity != brigfree) printf("%d Klingon%s in brig.\n",
-    							brigcapacity-brigfree, brigcapacity-brigfree>1 ? "s" : "");
-    if (kcaptured > 0) printf("%d captured Klingon%s turned in to Star Fleet.\n", 
-                               kcaptured, kcaptured>1 ? "s" : "");
-#endif
 	if (nhelp) printf("There were %d call%s for help.\n",
 					  nhelp, nhelp==1 ? "" : "s");
 	if (ship == IHE) {
@@ -91,7 +85,8 @@
 		if (nprobes!=1) proutn("s");
 		prout(".");
 	}
-	if (REPORTS && future[FDSPROB] != 1e30) {
+	if ((damage[DRADIO] == 0.0 || condit == IHDOCKED)&&
+		future[FDSPROB] != 1e30) {
 		if (isarmed) 
 			proutn("An armed deep space probe is in");
 		else
@@ -134,33 +129,12 @@
 	}
 	cramlc(1, quadx, quady);
 	skip(1);
-	if (coordfixed)
-	for (y = quady+1; y >= quady-1; y--) {
-		for (x = quadx-1; x <= quadx+1; x++) {
-			if (x == 0 || x > 8 || y == 0 || y > 8)
-				printf("   -1");
-			else {
-				printf("%5d", d.galaxy[x][y]);
-				// If radio works, mark star chart so
-				// it will show current information.
-				// Otherwise mark with current
-				// value which is fixed. 
-				starch[x][y] = damage[DRADIO] > 0 ? d.galaxy[x][y]+1000 :1;
-			}
-		}
-		putchar('\n');
-	}
-	else
 	for (x = quadx-1; x <= quadx+1; x++) {
 		for (y = quady-1; y <= quady+1; y++) {
 			if (x == 0 || x > 8 || y == 0 || y > 8)
 				printf("   -1");
 			else {
 				printf("%5d", d.galaxy[x][y]);
-				// If radio works, mark star chart so
-				// it will show current information.
-				// Otherwise mark with current
-				// value which is fixed. 
 				starch[x][y] = damage[DRADIO] > 0 ? d.galaxy[x][y]+1000 :1;
 			}
 		}
@@ -204,7 +178,7 @@
 	if (nn == 0) prout("STAR CHART FOR THE KNOWN GALAXY");
 	if (stdamtim != 1e30) {
 		if (condit == IHDOCKED) {
-			/* We are docked, so restore chart from base information -- these values won't update! */
+			/* We are docked, so restore chart from base information */
 			stdamtim = d.date;
 			for (i=1; i <= 8 ; i++)
 				for (j=1; j <= 8; j++)
@@ -221,33 +195,17 @@
 	prout("      1    2    3    4    5    6    7    8");
 	prout("    ----------------------------------------");
 	if (nn==0) prout("  -");
-	if (coordfixed)
-	for (j = 8; j >= 1; j--) {
-		printf("%d -", j);
-		for (i = 1; i <= 8; i++) {
-			if (starch[i][j] < 0) // We know only about the bases
-				printf("  .1.");
-			else if (starch[i][j] == 0) // Unknown
-				printf("  ...");
-			else if (starch[i][j] > 999) // Memorized value
-				printf("%5d", starch[i][j]-1000);
-			else
-				printf("%5d", d.galaxy[i][j]); // What is actually there (happens when value is 1)
-		}
-		prout("  -");
-	}
-	else
 	for (i = 1; i <= 8; i++) {
 		printf("%d -", i);
 		for (j = 1; j <= 8; j++) {
-			if (starch[i][j] < 0) // We know only about the bases
+			if (starch[i][j] < 0)
 				printf("  .1.");
-			else if (starch[i][j] == 0) // Unknown
+			else if (starch[i][j] == 0)
 				printf("  ...");
-			else if (starch[i][j] > 999) // Memorized value
+			else if (starch[i][j] > 999)
 				printf("%5d", starch[i][j]-1000);
 			else
-				printf("%5d", d.galaxy[i][j]); // What is actually there (happens when value is 1)
+				printf("%5d", d.galaxy[i][j]);
 		}
 		prout("  -");
 	}
@@ -309,22 +267,12 @@
 	for (i = 1; i <= 10; i++) {
 		int jj = (k!=0 ? k : i);
 		if (leftside) {
-			if (coordfixed) {
-				printf("%2d  ", 11-i);
-				for (j = 1; j <= 10; j++) {
-					if (goodScan || (abs((11-i)-secty)<= 1 && abs(j-sectx) <= 1))
-						printf("%c ",quad[j][11-i]);
-					else
-						printf("- ");
-				}
-			} else {
-				printf("%2d  ", i);
-				for (j = 1; j <= 10; j++) {
-					if (goodScan || (abs(i-sectx)<= 1 && abs(j-secty) <= 1))
-						printf("%c ",quad[i][j]);
-					else
-						printf("- ");
-				}
+			printf("%2d  ", i);
+			for (j = 1; j <= 10; j++) {
+				if (goodScan || (abs(i-sectx)<= 1 && abs(j-secty) <= 1))
+					printf("%c ",quad[i][j]);
+				else
+					printf("- ");
 			}
 		}
 		if (rightside) {
@@ -341,9 +289,6 @@
 						case IHDOCKED: cp = "DOCKED"; break;
 					}
 					printf(" Condition     %s", cp);
-#ifdef CLOAKING
-				    if (iscloaked) printf(", CLOAKED");
-#endif
 					break;
 				case 3:
 					printf(" Position     ");
@@ -479,10 +424,8 @@
 		chew();
 		ttime = (10.0*dist)/square(twarp);
 		tpower = dist*twarp*twarp*twarp*(shldup+1);
-		if (tpower >= energy) { // Suggestion from Ethan Staffin -- give amount needed
-			prout("Insufficient energy, sir: we would need ");
-			cramf(tpower, 1, 1);
-			proutn (" units.");
+		if (tpower >= energy) {
+			prout("Insufficient energy, sir.");
 			if (shldup==0 || tpower > energy*2.0) {
 				if (!wfl) return;
 				proutn("New warp factor to try? ");
diff -urN a/setup.c b/setup.c
--- a/setup.c	2015-06-26 19:15:56.000000000 +0300
+++ b/setup.c	1997-02-14 21:11:04.000000000 +0300
@@ -18,7 +18,7 @@
 	}
 	else {
 		if ((key = scan()) == IHEOL) {
-			proutn("File name(9 characters maximum): ");
+			proutn("File name: ");
 			key = scan();
 		}
 		if (key != IHALPHA) {
@@ -183,13 +183,6 @@
 	if (icrystl!=0) prout("The dilithium crystals have been moved.");
 	imine=0;
 	iscraft=0; /* Gallileo disappears */
-#ifdef CAPTURE
-	brigcapacity = 300; // Less capacity now
-	brigfree = brigcapacity;
-#endif
-#ifdef CLOAKING
-    iscloaked = iscloaking = FALSE;
-#endif
 	/* Resupply ship */
 	condit=IHDOCKED;
 	for (l = 1; l <= ndevice; l++) damage[l] = 0.0;
@@ -231,8 +224,7 @@
 	batx = baty = 0;
 	d.date = indate = 100.0*(int)(31.0*Rand()+20.0);
 	d.killk = d.killc = nkinks = nhelp = resting = casual = d.nromkl = 0;
-// Added d.starkl=0 6/2015
-    isatb = iscate = imine = icrystl = icraft = d.nsckill = d.nplankl = d.starkl = 0;
+	isatb = iscate = imine = icrystl = icraft = d.nsckill = d.nplankl = 0;
 	iscraft = 1;
 	landed = -1;
 	alive = 1;
@@ -365,7 +357,7 @@
 	skip(3);
 	d.snap = 0;
 		
-	if (skill == SNOVICE) {
+	if (skill == 1) {
 		printf("It is stardate %d. The Federation is being attacked by\n",
 			   (int)d.date);
 		printf("a deadly Klingon invasion force. As captain of the United\n"
@@ -380,7 +372,7 @@
 	}
 	else {
 		printf("Stardate %d.\n\n"
-			   "%d Klingons,\nan unknown number of Romulans\n",
+			   "%d Klingons.\nAn unknown number of Romulans\n",
 			   (int)d.date, inkling);
 		if (d.nscrem) printf("and one (GULP) Super-Commander.\n");
 		printf("%d stardates\n%d starbases in  ",(int)intime, inbase);
@@ -454,11 +446,11 @@
 			if (isit("short")) length = 1;
 			else if (isit("medium")) length = 2;
 			else if (isit("long")) length = 4;
-			else if (isit("novice")) skill = SNOVICE;
-			else if (isit("fair")) skill = SFAIR;
-			else if (isit("good")) skill = SGOOD;
-			else if (isit("expert")) skill = SEXPERT;
-			else if (isit("emeritus")) skill = SEMERITUS;
+			else if (isit("novice")) skill = 1;
+			else if (isit("fair")) skill = 2;
+			else if (isit("good")) skill = 3;
+			else if (isit("expert")) skill = 4;
+			else if (isit("emeritus")) skill = 5;
 			else {
 				proutn("What is \"");
 				proutn(citem);
@@ -476,7 +468,7 @@
 		strcpy(passwd, citem);
 		chew();
 		if (*passwd != 0) break;
-		proutn("Please type in a secret password (9 characters maximum)-");
+		proutn("Please type in a secret password-");
 	}
 #ifdef DEBUG
 	if (strcmp(passwd, "debug")==0) idebug = 1;
@@ -488,10 +480,10 @@
 	inbase = d.rembase;
 	inplan = (PLNETMAX/2) + (PLNETMAX/2+1)*Rand();
 	d.nromrem = (2.0+Rand())*skill;
-	d.nscrem = (skill > SFAIR? 1 : 0);
+	d.nscrem = (skill > 2? 1 : 0);
 	d.remtime = 7.0 * length;
 	intime = d.remtime;
-	d.remkl = 2.0*intime*((skill+1 - 2*Rand())*skill*0.1+.15); // d.remkl and inkling includes commanders and SC
+	d.remkl = 2.0*intime*((skill+1 - 2*Rand())*skill*0.1+.15);
 	inkling = d.remkl;
 	incom = skill + 0.0625*inkling*Rand();
 	d.remcom= min(10, incom);
@@ -500,17 +492,7 @@
 	inresor = d.remres;
 	if (inkling > 50) {
 		inbase = (d.rembase += 1);
-    }
-#ifdef CAPTURE
-	brigcapacity = 400;
-    brigfree = brigcapacity;
-    kcaptured = 0; // TAA fix 6/2015
-#endif
-#ifdef CLOAKING
-    ncviol = 0; // TAA fix 6/2015
-    iscloaked = FALSE;
-    iscloaking = FALSE;
-#endif
+	}
 	return FALSE;
 }
 
@@ -548,11 +530,7 @@
 	landed = -1;
 	ientesc = 0;
 	ithere = 0;
-    iseenit = 0;
-
-#ifdef CLOAKING
-    isviolreported = FALSE;
-#endif
+	iseenit = 0;
 	if (iscate) {
 		// Attempt to escape Super-commander, so tbeam back!
 		iscate = 0;
@@ -574,9 +552,9 @@
 	quad[sectx][secty] = ship;
 
 	// Decide if quadrant needs a Tholian
-	if ((skill <  SGOOD && Rand() <= 0.02) ||   /* Lighten up if skill is low */
-		(skill == SGOOD && Rand() <= 0.05) ||
-		(skill > SGOOD && Rand() <= 0.08)
+	if ((skill < 3 && Rand() <= 0.02) ||   /* Lighten up if skill is low */
+		(skill == 3 && Rand() <= 0.05) ||
+		(skill > 3 && Rand() <= 0.08)
 #ifdef DEBUG
 		|| strcmp(passwd, "tholianx")==0
 #endif
@@ -654,7 +632,7 @@
 	// Check for RNZ
 	if (irhere > 0 && klhere == 0 && basex == 0) {
 		neutz = 1;
-		if (REPORTS) { 
+		if (damage[DRADIO] <= 0.0) {
 			skip(1);
 			prout("LT. UHURA- \"Captain, an urgent message.");
 			prout("  I'll put it on audio.\"  CLICK");
diff -urN a/sst.c b/sst.c
--- a/sst.c	2015-08-29 22:47:16.000000000 +0300
+++ b/sst.c	2010-12-12 21:18:00.000000000 +0300
@@ -6,14 +6,15 @@
 #endif
 #include <time.h>
 	
-/*int getch(void);
-*/
+int getch(void);
 
 static char line[128], *linep = line;
 static int linecount;	/* for paging */
 
 static void clearscreen(void);
 
+#define NUMCOMMANDS 34
+
 /* Compared to original version, I've changed the "help" command to
    "call" and the "terminate" command to "quit" to better match
    user expectations. The DECUS version apparently made those changes
@@ -45,14 +46,13 @@
 
    5. The deep space probe looks interesting! DECUS version
 
-   6. Cloaking (with contributions from Erik Olofsen) and Capturing (BSD version).
+   6. Perhaps cloaking to be added later? BSD version
+
 
    */
 
-// I don't like the way this is done, relying on an index. But I don't
-// want to invest the time to make this nice and table driven.
 
-static char *commands[] = {
+static char *commands[NUMCOMMANDS] = {
 	"srscan",
 	"lrscan",
 	"phasers",
@@ -79,9 +79,6 @@
 	"commands",
     "emexit",
     "probe",
-    "cloak",
-    "capture",
-    "score",
 	"abandon",
 	"destruct",
 	"freeze",
@@ -89,12 +86,9 @@
 	"debug",
 	"call",
 	"quit",
-    "help"
- 
+	"help"
 };
 
-#define NUMCOMMANDS (sizeof(commands)/sizeof(char *))
-
 static void listCommands(int x) {
 	prout("   SRSCAN    MOVE      PHASERS   CALL\n"
 		  "   STATUS    IMPULSE   PHOTONS   ABANDON\n"
@@ -103,19 +97,8 @@
 		  "   DAMAGES   REPORT    SENSORS   ORBIT\n"
 		  "   TRANSPORT MINE      CRYSTALS  SHUTTLE\n"
 		  "   PLANETS   REQUEST   DEATHRAY  FREEZE\n"
-          "   COMPUTER  EMEXIT    PROBE     COMMANDS");
-    proutn("   ");
-#ifdef SCORE
-    proutn("SCORE     ");
-#endif
-#ifdef CLOAKING
-    proutn("CLOAK     ");
-#endif
-#ifdef CAPTURE
-    proutn("CAPTURE   ");
-#endif
-    if (x) proutn("HELP     ");
-    prout("");
+		  "   COMPUTER  EMEXIT    PROBE     COMMANDS");
+	if (x) prout("   HELP");
 }
 
 static void helpme(void) {
@@ -194,28 +177,15 @@
 			skip(1);
 			proutn("COMMAND> ");
 			if (scan() == IHEOL) continue;
-			for (i=0; i < 29; i++) // Abbreviations allowed for the first 29 commands, only.
+			for (i=0; i < 26; i++)
 				if (isit(commands[i]))
 					break;
-			if (i < 29) break;
+			if (i < 26) break;
 			for (; i < NUMCOMMANDS; i++)
 				if (strcmp(commands[i], citem) == 0) break;
-			if (i < NUMCOMMANDS
-#ifndef CLOAKING
-			    && i != 26 // ignore the CLOAK command
-#endif
-#ifndef CAPTURE
-			    && i != 27 // ignore the CAPTURE command
-#endif
-#ifndef SCORE
-			    && i != 28 // ignore the SCORE command
-#endif
-#ifndef DEBUG
-			    && i != 33 // ignore the DEBUG command
-#endif
-			   ) break;
+			if (i < NUMCOMMANDS) break;
 
-			if (skill <= SFAIR)  {
+			if (skill <= 2)  {
 				prout("UNRECOGNIZED COMMAND. LEGAL COMMANDS ARE:");
 				listCommands(TRUE);
 			}
@@ -277,7 +229,7 @@
 				impuls();
 				break;
 			case 10:		// rest
-				waiting();
+				wait();
 				if (ididit) hitme = TRUE;
 				break;
 			case 11:		// warp
@@ -330,57 +282,36 @@
 			case 25:
 				probe();		// Launch probe
 				break;
-#ifdef CLOAKING
-			case 26:
-				cloak();        // turn on/off cloaking
-				if (iscloaking) {
-					attack(2); // We will be seen while we cloak
-					iscloaking = FALSE;
-					iscloaked = TRUE;
-				}
-				break;
-#endif
-#ifdef CAPTURE
-			case 27:
-				capture();      // Attempt to get Klingon ship to surrender
-				if (ididit) hitme = TRUE;
-				break;
-#endif
-#ifdef SCORE
-			case 28:
-				score(1);    // get the score
-				break;
-#endif
-			case 29:			// Abandon Ship
+			case 26:			// Abandon Ship
 				abandn();
 				break;
-			case 30:			// Self Destruct
+			case 27:			// Self Destruct
 				dstrct();
 				break;
-			case 31:			// Save Game
+			case 28:			// Save Game
 				freeze(FALSE);
-				if (skill > SGOOD)
+				if (skill > 3)
 					prout("WARNING--Frozen games produce no plaques!");
 				break;
-			case 32:			// Try a desparation measure
+			case 29:			// Try a desparation measure
 				deathray();
 				if (ididit) hitme = TRUE;
 				break;
+			case 30:			// What do we want for debug???
 #ifdef DEBUG
-			case 33:			// What do we want for debug???
 				debugme();
-				break;
 #endif
-			case 34:		// Call for help
+				break;
+			case 31:		// Call for help
 				help();
 				break;
-			case 35:
+			case 32:
 				alldone = 1;	// quit the game
 #ifdef DEBUG
-				if (idebug) score(0);
+				if (idebug) score();
 #endif
 				break;
-			case 36:
+			case 33:
 				helpme();	// get help
 				break;
 		}
@@ -420,15 +351,6 @@
 	char ch;
 	prelim();
 
-	if (argc > 1) { // look for -f option
-		if (strcmp(argv[1], "-f")== 0) {
-			coordfixed = 1;
-			argc--;
-			argv++;
-		}
-	}
-					
-	
 	if (argc > 1) {
 		fromcommandline = 1;
 		line[0] = '\0';
@@ -443,7 +365,7 @@
 	while (TRUE) { /* Play a game */
 		setup();
 		if (alldone) {
-			score(0);
+			score();
 			alldone = 0;
 		}
 		else makemoves();
@@ -629,25 +551,27 @@
 									
 static void clearscreen(void) {
 	/* Somehow we need to clear the screen */
-	proutn("\033[2J\033[0;0H");	/* Hope for an ANSI display */
+#ifdef __BORLANDC__
+	extern void clrscr(void);
+	clrscr();
+#else
+	proutn("\033[2J");	/* Hope for an ANSI display */
+#endif
 }
 
 /* We will pull these out in case we want to do something special later */
 
 void pause(int i) {
-#ifdef CLOAKING
-	if (iscloaked) return;
-#endif
 	putchar('\n');
 	if (i==1) {
-		if (skill > SFAIR)
-			prout("[ANNOUNCEMENT ARRIVING...]");
+		if (skill > 2)
+			prout("[ANOUNCEMENT ARRIVING...]");
 		else
 			prout("[IMPORTANT ANNOUNCEMENT ARRIVING -- HIT SPACE BAR TO CONTINUE]");
 		getch();
 	}
 	else {
-		if (skill > SFAIR)
+		if (skill > 2)
 			proutn("[CONTINUE?]");
 		else
 			proutn("[HIT SPACE BAR TO CONTINUE]");
@@ -657,7 +581,7 @@
 	if (i != 0) {
 		clearscreen();
 	}
-    linecount = 0;
+	linecount = 0;
 }
 
 
@@ -767,17 +691,6 @@
 		}
 		chew();
 	}
-	proutn("Make universe visible? ");
-	if (ja() != 0) {
-		int i, j;
-		for (i = 1; i < 9; i++) 
-		{
-			for (j = 1; j < 9; j++)
-			{
-				starch[i][j] = 1;
-			}
-		}
-	}
 }
 			
 
diff -urN a/sst.doc b/sst.doc
--- a/sst.doc	2014-01-04 06:10:51.000000000 +0400
+++ b/sst.doc	1997-02-13 20:48:58.000000000 +0300
@@ -28,20 +28,20 @@
                    TT    RR     RR EEEEEEEEE KK     KK
 
 
-                     Produced For Your Enjoyment
+		     Produced For Your Enjoyment
 
                                  By
 
-                            David Matuszek
-                                 and
-                            Paul Reynolds
-
-                        With Modifications By
-                              Don Smith
-
-                            Resurrected By
-                               Tom Almy
-                                   
+			    David Matuszek
+				 and
+			    Paul Reynolds
+
+			With Modifications By
+			      Don Smith
+
+			    Resurected By
+			       Tom Almy
+				   
      Permission is hereby granted for the copying, distribution,
  modification and use of this program and associated documentation
  for recreational purposes, provided that all references to the
@@ -53,8 +53,11 @@
 
              ----------TABLE OF CONTENTS----------
 
+
+
      SECTION                                               PAGE
 
+
        INTRODUCTION TO THE GAME . . . . . . . . . . . . . .   1
 
        HOW TO ISSUE COMMANDS. . . . . . . . . . . . . . . .   4
@@ -93,25 +96,23 @@
             LAUNCH DEEP SPACE PROBE . . . . . . . . . . . .  21
             EMERGENCY EXIT. . . . . . . . . . . . . . . . .  21
             ASK FOR HELP. . . . . . . . . . . . . . . . . .  21
-            CLOAKING DEVICE . . . . . . . . . . . . . . . .  22
-            CAPTURE KLINGONS  . . . . . . . . . . . . . . .  22
-            GET THE SCORE . . . . . . . . . . . . . . . . .  22
 
-       MISCELLANEOUS NOTES. . . . . . . . . . . . . . . . .  23
 
-       SCORING. . . . . . . . . . . . . . . . . . . . . . .  24
+       MISCELLANEOUS NOTES. . . . . . . . . . . . . . . . .  22
 
-       HANDY REFERENCE PAGE . . . . . . . . . . . . . . . .  25
+       SCORING. . . . . . . . . . . . . . . . . . . . . . .  23
 
-       MODIFICATIONS. . . . . . . . . . . . . . . . . . . .  26
+       HANDY REFERENCE PAGE . . . . . . . . . . . . . . . .  24
 
-       ACKNOWLEDGMENTS. . . . . . . . . . . . . . . . . . .  27
+       MODIFICATIONS. . . . . . . . . . . . . . . . . . . .  25
 
-       REFERENCES . . . . . . . . . . . . . . . . . . . . .  27
+       ACKNOWLEDGMENTS. . . . . . . . . . . . . . . . . . .  26
 
+       REFERENCES . . . . . . . . . . . . . . . . . . . . .  26
 
 
-               -----INTRODUCTION TO THE GAME-----                       1
+
+		 -----INTRODUCTION TO THE GAME-----                       1
 
 
 The Organian Peace Treaty has collapsed, and the Federation is at war
@@ -136,7 +137,7 @@
 Enemies recharge during your absence.  If you leave a quadrant
 containing a weakened enemy, when you return to that quadrant he will
 be strong again.  Also, each time you enter a quadrant, the positions
-of everything in the quadrant (except your ship) are randomized, to
+of everthing in the quadrant (except your ship) are randomized, to
 save you the trouble of trying to remember where everything in the
 quadrant is.  Notice that this refers only to the positions of things
 in the quadrant--the numbers of each kind of thing are not changed
@@ -192,16 +193,16 @@
 period of time.  You will sometimes want to do the latter, since the
 various devices aboard your starship may be damaged and require time
 to repair.  Of course, repairs can be made more quickly at a starbase
-than can in flight.
+than than can in flight.
 
 In addition to Klingons, Romulans, and starbases, the galaxy contains
 (surprise) stars.  Mostly, stars are a nuisance and just get in your
 way.  You can trigger a star into going nova by shooting one of your
-photon torpedoes at it.  When a star novas, it does a lot of damage
+photon torpedoes at it.  When a star novas, it does a lot of dammage
 to anything immediately adjacent to it.  If another star is adjacent
 to a nova, it too will go nova.  Stars may also occasionally go
 supernova; a supernova in a quadrant destroys everything in the
-quadrant and makes the quadrant permanently uninhabitable.  You may
+quadrant andmakes the quadrant permanently uninhabitable.  You may
 "jump over" a quadrant containing a supernova when you move, but you
 should not stop there.
 
@@ -210,7 +211,7 @@
 an "emergency automatic override" which picks some random direction
 and some random warp factor, and tries to throw you clear of the
 supernova. If the supernova occurs in some other quadrant, you just
-get a warning message from Starfleet about it (provided, of course,
+get a warning message from starfleet about it (provided, of course,
 that your subspace radio is working).
 
 Also a few planets are scattered through the galaxy.  These can
@@ -220,7 +221,7 @@
 transporter, or take the shuttle craft "Galileo."
 
 Finally, each quadrant will contain from zero to three black holes.
-These can deflect or swallow torpedoes passing near them. They also
+These can deflect or swallor torpedoes passing near them. They also
 swallow enemy ships knocked into them.  If your ship enters one - - -
                                                                         3
 Star Trek is a rich game, full of detail.  These instructions are
@@ -228,12 +229,12 @@
 describe everything about the game, but there is quite a bit more
 here than you need to get started.  If you are new to the game, just
 get a rough idea of the kinds of commands available, and start
-playing.  After a game or two you will have learned everything
+playing.  After a game or two you will have learned everthing
 important, and the detailed command descriptions which follow will be
 a lot more meaningful to you.
 
 You have weapons: phasers and photon torpedoes. You have a defense:
-deflector shields.  You can look at things: long-range scanners,
+deflector shields.  You can look at things: long-range scaners,
 short-range scanners, and a star chart.  You can move about, under
 warp drive or impulse power.  You can also dock at a starbase, rest
 while repairs are being made, abandon ship, self destruct, or give up
@@ -242,25 +243,25 @@
 The Klingons are waiting.
 
 
-                 -----HOW TO ISSUE COMMANDS-----                        4
+		   -----HOW TO ISSUE COMMANDS-----                        4
 
 When the game is waiting for you to enter a command it will print out
 
-        COMMAND>
+	COMMAND>
 
 You may then type in your command.  All you have to remember for each
 command is the mnemonic. For example, if you want to move straight up
 one quadrant, you can type in the mnemonic (case insensitive)
 
-        move
+	move
 
 and the computer will prompt you with
 
-        Manual or automatic- 
+	Manual or automatic- 
 
 Say you type in "manual". The computer then responds
 
-        X and Y displacements- 
+	X and Y displacements- 
 
 Now you type in "0 1" which specifies an X movement of zero and a Y
 movement of one.
@@ -269,21 +270,21 @@
 simply by typing in the information without waiting to be asked for
 it. For example, in the above example, you could simply type in
 
-        move manual 0 1
+	move manual 0 1
 
 and it will be done.  Or you could type in
 
-        move manual
+	move manual
 
 and when the computer responds with the displacement prompt, you can type in
 
-        0 1
+	0 1
 
 and it will understand.
 
 You can abbreviate most mnemonics.  For "move", you can use any of
 
-        move mov mo m
+	move mov mo m
 
 successfully.  For your safety, certain critical commands (such as to
 abandon ship) must be written out in full.  Also, in a few cases two
@@ -293,14 +294,15 @@
 complicated, but you will learn the abbreviations quickly enough.
 
 What this all boils down to is:
-        (1)  You can abbreviate practically anything
-        (2)  If you forget, the computer will prompt you
-        (3)  If you remember, you can type it all on one line
+	(1)  You can abbreviate practically anything
+	(2)  If you forget, the computer will proompt you
+	(3)  If you remember, you can type it all on one line
 
 If you are part way through entering a command and you change your
-mind, you can cancel the command by typing -1 as one of the
-parameters, with the exception of the manual move command. If 
-anything is not clear to you, experiment.  The worst you can do is
+minde, you can cancel the command by typing -1 as one of the
+parameters, with the exception of the manual move command.
+
+If anything is not clear to you, experiment.  The worst you can do is
 lose a game or two.
 
 -----DESCRIPTION OF COMMANDS-----                                       5
@@ -371,23 +373,23 @@
   STARDATE - The current date. A stardate is the same as a day.
 
   CONDITION - There are four possible conditions:
-        DOCKED - docked at starbase.
-        RED    - in battle.
-        YELLOW - low on energy (<1000 units)
+	DOCKED - docked at starbase.
+	RED    - in battle.
+	YELLOW - low on energy (<1000 units)
         GREEN  - none of the above
 
   POSITION - Quadrant is given first, then sector
   
   LIFE SUPPORT - If "ACTIVE" then life support systems are
-        functioning normally. If on "RESERVES" the number is how many
-        stardates your reserve food, air, etc. will last--you must
-        get repairs made or get to starbase before your reserves run
-        out. 
+	functioning normally. If on "RESERVES" the number is how many
+	stardates your reserve food, air, etc. will last--you must
+	get repairs made or get to starbase before your reserves run
+	out. 
 
   WARP FACTOR - What your warp factor is currently set to.
 
   ENERGY - The amount of energy you have left. If it drops to zero,
-        you die.
+	you die.
 
   TORPEDOES - How many photon torpedoes you have left.
 
@@ -398,10 +400,10 @@
   KLINGONS LEFT - How many of the Klingons are still out there.
 
   TIME LEFT - How long the Federation can hold out against the
-        present number of Klingons; that is, how long until the end
-        if you do nothing in the meantime.  If you kill Klingons
-        quickly, this number will go up--if not, it will go down.  If
-        it reaches zero, the federation is conquered and you lose.
+	present number of Klingons; that is, how long until the end
+	if you do nothing in the meantime.  If you kill Klingons
+	quickly, this number will go up--if not, it will go down.  If
+	it reaches zero, the federation is conquered and you lose.
 
 Status information is free--it uses no time or energy, and if you are
 in battle, the Klingons are not given another chance to hit you.
@@ -455,7 +457,7 @@
 short-range sensors.
 
 Since you are in column 1, there are no quadrants to your left. The
-minus ones indicate the negative energy barrier at the edge of the
+minus oones indicate the negative energy barrier at the edge of the
 galaxy, which you are not permitted to cross.
 
 Long-range scans are free.  They use up no energy or time, and can be
@@ -480,7 +482,7 @@
 interpreted exactly as they are on a long-range scan. A period (.) in
 place of a digit means you do not know that information yet.  For
 example, ... means you know nothing about the quadrant, while .1.
-means you know it contains a base, but an unknown number of Klingons
+menas you know it contains a base, but an unknown number of Klingons
 and stars.
 
 Looking at the star chart is a free operation.  It costs neither time
@@ -523,7 +525,7 @@
 There are two command modes for movement: MANUAL and AUTOMATIC.  The
 manual mode requires the following format:
 
-        MOVE MANUAL <deltax> <deltay>
+	MOVE MANUAL <deltax> <deltay>
 
 <deltax> and <deltay> are the horizontal and vertical displacements
 for your starship, in quadrants; a displacement of one sector is 0.1
@@ -532,36 +534,36 @@
 omitted, it is assumed zero. For example, the shortest possible
 command to move one sector to the right would be
 
-        M M .1
+	M M .1
 
 The following examples of manual movement refer to the short-range
 scan shown earlier.
 
-  Destination Sector    Manual Movement command
-        3 - 1                   M M -.3 -.1
-        2 - 1                   M M -.3
-        1 - 2                   M M -.2 .1
-        1 - 4                   M M 0 .1
-  (leaving quadrant)            M M 0 .2
+  Destination Sector	Manual Movement command
+	3 - 1			M M -.3 -.1
+	2 - 1			M M -.3
+	1 - 2			M M -.2 .1
+	1 - 4			M M 0 .1
+  (leaving quadrant)		M M 0 .2
 
 
 The automatic mode is as follows:
 
-        MOVE AUTOMATIC <qrow> <qcol> <srow> <scol>
+	MOVE AUTOMATIC <qrow> <qcol> <srow> <scol>
 
 where <qrow> and <qcol> are the row and column numbers of the
 destination quadrant, and <srow> and <scol> are the row and column
-numbers of the destination sector in that quadrant.  This command also
+numbers of thedestination sector in that quadrant.  This command also
 moves your ship in a straight line path to the destination.  For
 moving within a quadrant, <qrow> and <qcol> may be omitted. For
 example, to move to sector 2 - 9 in the current quadrant, the
 shortest command would be
 
-        M A 2 9
+	M A 2 9
 
 To move to quadrant 3 - 7, sector 5 - 8, type
 
-        M A 3 7 5 8
+	M A 3 7 5 8
 
 and it will be done.  In automatic mode, either two or four numbers
 must be supplied.
@@ -602,7 +604,7 @@
 depends on how far you go at that warp factor.
 
 At exactly warp 10 there is some probability of entering a so-called
-"time warp" and being thrown forward or backward in time.  The farther
+"time warp" and being thrown foward or backward in time.  The farther
 you go at warp 10, the greater is the probability of entering the
 time warp.
 
@@ -647,7 +649,7 @@
 You may move with your shields up; this costs nothing under impulse
 power, but doubles the energy required for warp drive.
 
-Each time you raise or lower your shields, the Klingons have another
+Each time you raise or lower yoru shields, the Klingons have another
 chance to attack.  Since shields do not raise and lower
 instantaneously, the hits you receive will be intermediate between
 what they would be if the shields were completely up or completely
@@ -663,12 +665,12 @@
 deflected considerably from their intended course as they pass
 through the shields (depending on shield strength).
 
-You may transfer energy between the ship's energy (given as "Energy"
+You may transfer energy beteen the ship's energy (given as "Energy"
 in the status) and the shields.  Thee word "TRANSFER" may be
-abbreviated "T".  The amount of energy to transfer is the number of
+abbreviated "T".  The ammount of energy to transfer is the number of
 units of energy you wish to take from the ship's energy and put into
 the shields.  If you specify an negative number, energy is drained
-from the shields to the ship.  Transferring energy constitutes a turn.
+from the shields to the ship.  Transfering energy constitutes a turn.
 If you transfer energy to the shields while you are under attack,
 they will be at the new energy level when you are next hit.
 
@@ -693,7 +695,7 @@
 The average hit required to kill an ordinary Klingon varies from 200
 units in the Novice game to 250 units in the Emeritus game.
 Commanders normally require from 600 (Novice) to 700 (Emeritus).  The
-Super-commander requires from 875 (Good) to 1000 (Emeritus). Romulans
+Super-commander requres from 875 (Good) to 1000 (Emeritus). Romulans
 require an average of 350 (Novice) to 450 (Emeritus).
 
 Hits on enemies are cumulative, as long as you don't leave the
@@ -715,7 +717,7 @@
 your <amount to fire> among the Klingons present.  If phaser firing
 is manual, you specify how much energy to fire at each Klingon
 present (nearest first), rather than just specifying a total amount.
-You can abbreviate "MANUAL" and "AUTOMATIC" to one or more letters; if
+You can abreviate "MANUAL" and "AUTOMATIC" to one or more letters; if
 you mention neither, automatic fire is usually assumed.
 
 Battle computer information is available by firing phasers manually,
@@ -906,7 +908,7 @@
 may or may not be able to re-materialize you again.  The long-range
 transporter beam has no absolute maximum range; if you are in the
 same quadrant as a starbase, you have a good chance (about 90%) of
-re-materializing successfully.  Your chances drop to roughly 50-50 at
+re-materializing successfully.  your chances drop to roughly 50-50 at
 just over 3 quadrants.
 
 
@@ -1226,7 +1228,7 @@
 directory, erase the screen, and exit.
 
 Of course, you do loose the chance to get a plaque when you use this
-maneuver.
+manouver.
 
 
  ****************
@@ -1236,64 +1238,10 @@
   Mnemonic:  HELP
   Full command:  HELP <command>
 
-This command reads the appropriate section from the SST.DOC file,
+Thic command reads the appropriate section from the SST.DOC file,
 providing the file is in the current directory.
 
-                                                                       22
- *******************
- * CLOAKING DEVICE *
- *******************
-
-  Mnemonic:  CLOAK
-  Shortest abbreviation:  CLOAK
-  Full commands:  CLOAK ON
-                  CLOAK OFF
-
-The cloaking device prevents your ship from being seen by any enemy
-vessels.  When the cloaking device is in use, your subspace radio will
-not receive transmissions, torpedoes will be less accurate, you cannot
-dock, and you cannot use your warp engines. Enemy ships will get a
-chance to attack you when you turn clocking on.
-
-The Treaty of Algeron with the Romulans in Stardate 2311 prohibits the
-use of cloaking devices. If a Romulan ship observes you cloaking or
-uncloaking after this point in time you will be in violation, which
-will hurt your final score.
-
-The Faerie Queene does not have a cloaking device.
-
- ********************
- * CAPTURE KLINGONS *
- ********************
-
-  Mnemonic:  CAPTURE
-  Shortest abbreviation: CA
-
-The capture command provides a more humane way to end a battle than
-just destroying the Klingon battleship with the crew aboard. Assuming
-the subspace radio and transporter are working, and there is room in
-the brig, this command will ask the captain of the weakest Klingon
-ship in the quadrant to surrender.  If the captain agrees, some of the
-crew will transport to your ship and the Klingon ship will be
-destroyed. This command does take time and you will be attacked by any
-other enemy ships if the surrender occurs. 
-
-When you dock, any captured Klingons will be transferred to the base
-and you will be credited with the lives you save.
-
- *****************
- * GET THE SCORE *
- *****************
-
-  Mnemonic:  SCORE
-  Shortest abbreviation: SC
-
-Shows what the score would be if the game were to end naturally at
-this point. Since the game hasn't really ended and you lose points if
-you quit, this is perhaps a meaningless command, but it gives you a
-general idea of how well you are performing.
-
-            **********MISCELLANEOUS NOTES**********                    23
+            **********MISCELLANEOUS NOTES**********                    22
 
 Starbases can be attacked by either commanders or by the
 "Super-Commander".  When this happens, you will be notified by
@@ -1340,7 +1288,7 @@
 
 You can get a list of commands by typing "COMMANDS".
 
-                     ----------SCORING----------                       24
+                     ----------SCORING----------                       23
 
 
 Scoring is fairly simple.  You get points for good things, and you
@@ -1348,16 +1296,15 @@
 
  You gain--
 
-     (1)   10 points for each ordinary Klingon ship you destroy,
-     (2)   50 points for each commander ship you destroy,
-     (3)  200 points for destroying the "Super-Commander" ship,
-     (4)    3 points for each Klingon captured.
-     (5)   20 points for each Romulan ship destroyed,
-     (6)    1 point for each Romulan captured.
-     (7)  500 times your average Klingon ship/stardate kill rate.  If you
+     (1)   10 points for each ordinary Klingon you kill,
+     (2)   50 points for each commander you kill,
+     (3)  200 points for killing the "Super-Commander",
+     (4)   20 points for each Romulan killed,
+     (5)    1 point for each Romulan captured.
+     (6)  500 times your average Klingon/stardate kill rate.  If you
                lose the game, your kill rate is based on a minimum of
                5 stardates.
-     (8)  You get a bonus if you win the game, based on your rating:
+     (7)  You get a bonus if you win the game, based on your rating:
                Novice=100, Fair=200, Good=300, Expert=400, Emeritus=500.
 
  You lose--
@@ -1365,11 +1312,10 @@
      (8)  200 points if you get yourself killed,
      (9)  100 points for each starbase you destroy,
     (10)  100 points for each starship you lose,
-    (11)  100 points for each violation of the Treaty of Algeron observed,
-    (12)   45 points for each time you had to call for help,
-    (13)   10 points for each planet you destroyed,
-    (14)    5 points for each star you destroyed, and
-    (15)    1 point for each casualty you incurred.
+    (11)   45 points for each time you had to call for help,
+    (12)   10 points for each planet you destroyed,
+    (13)    5 points for each star you destroyed, and
+    (14)    1 point for each casualty you incurred.
 
 In addition to your score, you may also be promoted one grade in rank
 if you play well enough.  Promotion is based primarily on your
@@ -1395,15 +1341,13 @@
 you want to start at the Expert level, go ahead.  It's your funeral.
 The emeritus game is strictly for masochists.
 
-           ----------HANDY REFERENCE PAGE----------                   25
+           ----------HANDY REFERENCE PAGE----------                   24
 
  ABBREV    FULL COMMAND                           DEVICE USED
  ------    ------------                           -----------
  ABANDON   ABANDON                                shuttle craft
  C         CHART                                  (none)
- CA        CAPTURE                                subspace radio, transporter
  CALL      CALL (for help)                        subspace radio
- CL        CLOAK                                  cloaking
  CO        COMPUTER                               computer
  CR        CRYSTALS                               (none)
  DA        DAMAGES                                (none)
@@ -1431,7 +1375,6 @@
  R         REST <NUMBER OF STARDATES>             (none)
  QUIT      QUIT                                   (none)
  S         SRSCAN <NO or CHART>                   short-range sensors
- SC        SCORE                                  (none)
  SE        SENSORS                                short-range sensors
  SH        SHIELDS <UP, DOWN, or TRANSFER>        deflector shields
  SHU       SHUTTLE                                shuttle craft
@@ -1462,7 +1405,7 @@
     to travel at a speed of (warp factor squared)/10 quadrants per stardate.
 Impulse engines require 20 units to warm up, plus 100 units per
      quadrant.  Speed is just under one sector per stardate.
-                  ********MODIFICATIONS********                       26
+                  ********MODIFICATIONS********                       25
 
 Back in (about) 1977 I got a copy of this Super Star Trek game for
 the CDC 6600 mainframe computer. Someone had converted it to PDP-11
@@ -1523,17 +1466,10 @@
   the algorithm.
 
   The DECUS version had a Deep Space Probe. Looked like a good idea
-  so I implemented it based on its description.
-
-  In 2013 I added the CLOAK and CAPTURE commands and also fixed lots
-  of bugs. The CAPTURE command is based on the one in BSDTrek. When
-  making this change I also changed text so that killing Klingons
-  became destroying Klingon ships reflecting that a Klingon ship does
-  have more than one Klingon aboard! The CLOAK command and some other
-  bug fixes and correction of typos are thanks to Erik Olofsen.
+  so I implimented it based on its description.
 
 
-               ----------ACKNOWLEDGMENTS----------                    27
+               ----------ACKNOWLEDGMENTS----------                    26
 
 The authors would like to thank Professor Michael Duggan for his
 encouragement and administrative assistance with the development of
diff -urN a/sst.h b/sst.h
--- a/sst.h	2015-08-28 23:13:44.000000000 +0300
+++ b/sst.h	2010-12-12 21:20:50.000000000 +0300
@@ -8,18 +8,9 @@
 #define EXTERN
 #endif
 
-#ifdef WINDOWS
-#define DEBUG
-#define SCORE
-#define CLOAKING
-#define CAPTURE
-#endif
+// #define DEBUG
 
-#ifdef CLOAKING
-#define ndevice (16)
-#else
 #define ndevice (15)	// Number of devices
-#endif
 #define phasefac (2.0)
 #define PLNETMAX (10)
 #define NEVENTS (8)
@@ -35,7 +26,7 @@
 EXTERN struct foo {
 		int snap,		// snapshot taken
 		remkl,			// remaining klingons
-	        remcom,			// remaining commanders
+	    remcom,			// remaining commanders
 		rembase,		// remaining bases
 		starkl,			// destroyed stars
 		basekl,			// destroyed bases
@@ -53,9 +44,6 @@
 		nsckill,		// super commanders killed
 		nplankl;		// destroyed planets
 	PLANETS plnets[PLNETMAX+1];  // Planet information
-#ifdef CAPTURE
-    int kcaptured, brigfree;
-#endif
 	double date,		// stardate
 		remres,			// remaining resources
 	    remtime;		// remaining time
@@ -118,15 +106,6 @@
 #ifdef DEBUG
 	idebug,
 #endif
-#ifdef CLOAKING
-    iscloaked,
-    iscloaking,
-    ncviol,
-    isviolreported,
-#endif
-#ifdef CAPTURE
-    brigcapacity,
-#endif
 	iattak,
 	icrystl,
 	tourn,
@@ -142,7 +121,6 @@
 	proben,
 	isarmed,
 	nprobes;
-
 	double inresor,
 	intime,
 	inenrg,
@@ -217,17 +195,6 @@
 #ifdef DEBUG
 #define idebug a.idebug			// Debug mode
 #endif
-#ifdef CLOAKING
-#define iscloaked a.iscloaked  // Cloaking is enabled
-#define iscloaking a.iscloaking // However if iscloaking is TRUE then in process of cloaking and can be attacked
-#define ncviol a.ncviol		// Treaty violations
-#define isviolreported a.isviolreported // Violation reported by Romulan in quadrant
-#endif
-#ifdef CAPTURE
-#define kcaptured d.kcaptured   // number of captured Klingons                  
-#define brigfree d.brigfree     // room in the brig
-#define brigcapacity a.brigcapacity        // How many Klingons the brig will hold
-#endif
 #define iattak a.iattak			// attack recursion elimination (was cracks[4])
 #define icrystl a.icrystl		// dilithium crystals aboard
 #define tourn a.tourn			// Tournament number
@@ -274,7 +241,7 @@
 		starch[9][9];	// star chart
 
 EXTERN int fromcommandline; // Game start from command line options
-EXTERN int coordfixed; // Fix those dumb coordinates. 
+
 
 EXTERN char	passwd[10],		// Self Destruct password
 		*device[ndevice+1];
@@ -295,17 +262,11 @@
               FNEG3, FNOVA, FSNOVAED, FABANDN, FDILITHIUM,
 			  FMATERIALIZE, FPHASER, FLOST, FMINING, FDPLANET,
 			  FPNOVA, FSSC, FSTRACTOR, FDRAY, FTRIBBLE,
-			  FHOLE
-#ifdef CLOAKING
-   , FCLOAK
-#endif
-} FINTYPE ;
+			  FHOLE} FINTYPE ;
 
-/* Skill levels */
-typedef enum {SNOVICE=1, SFAIR, SGOOD, SEXPERT, SEMERITUS} SKILLTYPE;
 
 EXTERN double aaitem;
-EXTERN char citem[24];
+EXTERN char citem[12];
 
 
 /* Define devices */
@@ -324,7 +285,6 @@
 #define DSHCTRL 13
 #define DDRAY   14  // Added deathray
 #define DDSP    15  // Added deep space probe
-#define DCLOAK  16  // Added cloaking device
 
 /* Define future events */
 #define FSPY	0	// Spy event happens always (no future[] entry)
@@ -355,15 +315,9 @@
 	"Computer",
 	"Transporter",
 	"Shield Control",
-	"Death Ray",
-	"D. S. Probe"
-#ifdef CLOAKING
-	,"Cloaking Device"
+    "Death Ray",
+    "D. S. Probe"};									
 #endif
-};									
-#endif
-
-#define ALGERON (2311) /* Date of the Treaty of Algeron */
 
 #ifndef TRUE
 #define TRUE (1)
@@ -397,7 +351,7 @@
 void attack(int);
 int choose(void);
 void setup(void);
-void score(int);
+void score(void);
 void atover(int);
 void srscan(int);
 void lrscan(void);
@@ -409,7 +363,7 @@
 void dreprt(void);
 void chart(int);
 void impuls(void);
-void waiting(void);
+void wait(void);
 void setwrp(void);
 void events(void);
 void report(int);
@@ -445,7 +399,7 @@
 void dropin(int, int*, int*);
 void newcnd(void);
 void sortkl(void);
-void lmove(void);
+void move(void);
 void ram(int, int, int, int);
 void crmena(int, int, int, int, int);
 void deadkl(int, int, int, int, int);
@@ -474,23 +428,3 @@
 void attakreport(void);
 void movetho(void);
 void probe(void);
-
-#ifndef WINDOWS
-int min(int, int);
-int max(int, int);
-#endif
-void randomize(void);
-int getch(void);
-
-#ifdef CLOAKING
-void cloak(void);
-#endif
-#ifdef CAPTURE
-void capture(void);
-#endif
-
-#ifdef CLOAKING
-#define REPORTS ((condit==IHDOCKED || damage[DRADIO]<=0.0) && !iscloaked)
-#else
-#define REPORTS (condit==IHDOCKED || damage[DRADIO]<=0.0)
-#endif
